# we need to launch library compilation from SGDK folder
ifneq ($(wildcard ./bin/rescomp.jar),)
	GDK := .
else
    $(error You should build the library *FROM THE SGDK FOLDER* using 'bin/make -f makelib.gen' command)
endif

include $(GDK)/common.mk

BUILD_TYPE := release
ifeq ($(MAKECMDGOALS),debug)
  	BUILD_TYPE := debug
else ifeq ($(MAKECMDGOALS),Debug)
  	BUILD_TYPE := debug
else ifeq ($(MAKECMDGOALS),clean-debug)
  	BUILD_TYPE := debug
else ifeq ($(MAKECMDGOALS),asm)
  	BUILD_TYPE := asm
else ifeq ($(MAKECMDGOALS),Asm)
  	BUILD_TYPE := asm
else ifeq ($(MAKECMDGOALS),clean-asm)
  	BUILD_TYPE := asm
else ifeq ($(MAKECMDGOALS),cppsupport)
  	BUILD_TYPE := cppsupport
else ifeq ($(MAKECMDGOALS),clean-cppsupport)
  	BUILD_TYPE := cppsupport
endif

OUT_DIR := out/$(BUILD_TYPE)

SRC_LIB_C = $(wildcard $(SRC_LIB)/*.c)
SRC_LIB_C += $(wildcard $(SRC_LIB)/*/*.c)
SRC_LIB_C += $(wildcard $(SRC_LIB)/*/*/*.c)
SRC_LIB_C := $(filter-out $(SRC_LIB)/boot/rom_head.c, $(SRC_LIB_C))
SRC_LIB_S = $(wildcard $(SRC_LIB)/*.s)
SRC_LIB_S += $(wildcard $(SRC_LIB)/*/*.s)
SRC_LIB_S += $(wildcard $(SRC_LIB)/*/*/*.s)
SRC_LIB_S := $(filter-out $(SRC_LIB)/boot/sega.s, $(SRC_LIB_S))
SRC_LIB_S80 = $(wildcard $(SRC_LIB)/*.s80)
SRC_LIB_S80 += $(wildcard $(SRC_LIB)/*/*.s80)
SRC_LIB_S80 += $(wildcard $(SRC_LIB)/*/*/*.s80)

RES_LIB_RES := $(wildcard $(RES_LIB)/*.res)

OBJS_LIB = $(RES_LIB_RES:.res=.o)
OBJS_LIB += $(SRC_LIB_S80:.s80=.o)
OBJS_LIB += $(SRC_LIB_S:.s=.o)
OBJS_LIB += $(SRC_LIB_C:.c=.o)
OBJS_LIB := $(addprefix $(OUT_DIR)/, $(OBJS_LIB))

LSTS_LIB := $(SRC_LIB_C:.c=.lst)
LSTS_LIB := $(addprefix $(OUT_DIR)/, $(LSTS_LIB))

INCS_LIB := -I$(INC_LIB) -I$(OUT_DIR)
DEFAULT_FLAGS_LIB := $(EXTRA_FLAGS) -DSGDK_GCC -m68000 -Wall -Wextra -Wno-array-bounds -Wno-shift-negative-value -Wno-unused-parameter -fno-builtin -fms-extensions -ffunction-sections -fdata-sections $(INCS_LIB) -B$(BIN)
FLAGSZ80_LIB := -i$(SRC_LIB) -i$(INC_LIB) -i$(INC_LIB)/snd -i$(OUT_DIR)

ifeq ($(BUILD_TYPE),debug)
	# debug
	FLAGS_LIB := $(DEFAULT_FLAGS_LIB) -O1 -DDEBUG=1
	CFLAGS_LIB := $(FLAGS_LIB) -ggdb
	AFLAGS_LIB := -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or $(FLAGS_LIB)
else ifeq ($(BUILD_TYPE),asm)
	# asm
	FLAGS_LIB := $(DEFAULT_FLAGS_LIB) -O3 -fuse-linker-plugin -fno-web -fno-gcse -fno-tree-loop-ivcanon -fomit-frame-pointer
	CFLAGS_LIB := $(FLAGS_LIB)
	AFLAGS_LIB := -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or $(FLAGS_LIB)
else
	# release
	FLAGS_LIB := $(DEFAULT_FLAGS_LIB) -O3 -fuse-linker-plugin -fno-web -fno-gcse -fno-tree-loop-ivcanon -fomit-frame-pointer -flto -flto=auto -ffat-lto-objects
	CFLAGS_LIB := $(FLAGS_LIB)
	AFLAGS_LIB := -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or $(FLAGS_LIB)
endif

.PHONY: default
.PHONY: all
.PHONY: cppsupport
.PHONY: release
.PHONY: Release
.PHONY: debug
.PHONY: Debug
.PHONY: asm
.PHONY: Asm
.PHONY: clean
.PHONY: clean-cppsupport
.PHONY: clean-release
.PHONY: clean-debug
.PHONY: clean-asm
.PHONY: clean-all

default: all
all: cppsupport release debug
clean: clean-all

Release: release
Debug: debug
Asm: asm

cppsupport: $(LIB)/libsys.a $(LIB)/libcpp.a

release: $(LIB)/libmd.a

debug: $(LIB)/libmd_debug.a

asm: $(OBJS_LIB) $(LSTS_LIB)

clean-all:
	$(RM) -r -f out

clean-cppsupport: clean-task
clean-release: clean-task
clean-debug: clean-task
clean-asm: clean-task

clean-task:
	$(RM) -r -f $(OUT_DIR)
.PHONY: clean-task


$(LIB)/libmd.a: $(OUT_DIR)/libmd.a
	$(CP) $(OUT_DIR)/libmd.a $(LIB)/libmd.a

$(LIB)/libmd_debug.a: $(OUT_DIR)/libmd.a
	$(CP) $(OUT_DIR)/libmd.a $(LIB)/libmd_debug.a

$(OUT_DIR)/libmd.a: $(OUT_DIR)/cmd_
	$(AR) rs $(OUT_DIR)/libmd.a $(LTO_PLUGIN) @$(OUT_DIR)/cmd_
	$(RM) $(OUT_DIR)/cmd_

$(OUT_DIR)/cmd_: $(OBJS_LIB)
	$(ECHO) "$(OBJS_LIB)" > $(OUT_DIR)/cmd_

$(LIB)/libsys.a: $(OUT_DIR)/libsys.a
	$(CP) $(OUT_DIR)/libsys.a $(LIB)/libsys.a

$(OUT_DIR)/libsys.a: $(OUT_DIR)/syscalls.o
	$(AR) rcs $@ $(LTO_PLUGIN) $^

$(LIB)/libcpp.a: $(OUT_DIR)/libcpp.a
	$(CP) $(OUT_DIR)/libcpp.a $(LIB)/libcpp.a

$(OUT_DIR)/libcpp.a: $(OUT_DIR)/cppsupport.o
	$(AR) rcs $@ $(LTO_PLUGIN) $^

# source compilation
$(OUT_DIR)/%.o: %.c
	@$(MKDIR) -p $(dir $@)
	$(CC) $(CFLAGS_LIB) -c $< -o $@

$(OUT_DIR)/%.o: %.s
	@$(MKDIR) -p $(dir $@)
	$(CC) $(AFLAGS_LIB) -c $< -o $@

$(OUT_DIR)/%.rs: %.res
	@$(MKDIR) -p $(dir $@)
	$(RESCOMP) $*.res $(OUT_DIR)/$*.rs

$(OUT_DIR)/%.o80: %.s80
	@$(MKDIR) -p $(dir $@)
	$(ASMZ80) $(FLAGSZ80_LIB) $< $@ $(OUT_DIR)/out.lst


# listing files
$(OUT_DIR)/%.lst: %.c
	@$(MKDIR) -p $(dir $@)
	$(CC) $(CFLAGS_LIB) -S -c $< -o $@


# intermediate files
$(OUT_DIR)/%.o: $(OUT_DIR)/%.s
	@$(MKDIR) -p $(dir $@)
	$(CC) $(AFLAGS_LIB) -c $< -o $@

$(OUT_DIR)/%.o: $(OUT_DIR)/%.rs
	@$(MKDIR) -p $(dir $@)
	$(CC) $(AFLAGS_LIB) -c $< -o $@

$(OUT_DIR)/%.s: $(OUT_DIR)/%.o80
	@$(MKDIR) -p $(dir $@)
	$(BINTOS) $<

$(OUT_DIR)/cppsupport.o: $(SRC_LIB)/ext/cppsupport/cplusplus.cpp
	@$(MKDIR) -p $(dir $@)
	$(CXX) $(CFLAGS_LIB) -c $< -o $@

$(OUT_DIR)/syscalls.o: $(SRC_LIB)/ext/cppsupport/syscalls.c
	@$(MKDIR) -p $(dir $@)
	$(CC) $(CFLAGS_LIB) -c $< -o $@
